// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  email              String       @unique
  password           String
  role               User__Role
  needPasswordChange Boolean      @default(true)
  status             User__Status @default(ACTIVE)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  admin   Admin?
  doctor  Doctor?
  Patient Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Doctor {
  id                  String              @id @default(uuid())
  name                String
  email               String              @unique
  profilePhoto        String?
  contactNumber       String
  address             String?
  registerNumber      String
  experience          Int                 @default(0)
  gender              Gender
  appointmentfee      Int
  qualification       String
  currentWorkingPlace String
  designation         String
  isDeleted           Boolean             @default(false)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [email], references: [email])
  DoctorSpecialties   DoctorSpecialties[]

  @@map("doctors")
}

model Patient {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  address       String?
  gender        Gender
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [email], references: [email])

  @@map("patient")
}

model Specialties {
  id                String              @id @default(uuid())
  title             String
  icon              String
  DoctorSpecialties DoctorSpecialties[]

  @@map("specialities")
}

model DoctorSpecialties {
  specialtiesId String
  doctorId      String
  specialties   Specialties @relation(fields: [specialtiesId], references: [id])
  doctor        Doctor      @relation(fields: [doctorId], references: [id])

  @@id([specialtiesId, doctorId])
  @@map("doctorSpecialities")
}

enum User__Role {
  SUPER_ADMIN
  PATIENT
  ADMIN
  DOCTOR
}

enum User__Status {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}
